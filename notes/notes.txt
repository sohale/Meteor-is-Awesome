//UsersDB = new Mongo.Collection("users"); //we simply cannot access this table, so we use another one.


{{> hello}}
{{> infobox}}  
<hr/>


<template name="hello">
  <button>Click counter</button>: You've pressed this button {{counter}} times.
</template>
Is this done on the serverside too?

<template name="infobox">
  Infobox: <button>show info</button>
</template>

<template name="task">
  wot {{text}}
</template>

removed

{{> pokert}}

<template name="pokert">
  <button> Poke {{userpp}}</button>
  <!-- user is taken from helper?-->
</template>


js
  Template.hello.helpers({
    counter: function () {
      return Session.get('counter');
    }
  });

  Template.hello.events({
    'click button': function () {
      // increment the counter when button is clicked
      Session.set('counter', Session.get('counter') + 1);
    }
  });


    /*
  Template.body.helpers({
    tasks: [
      { text: "This is task 1" },
      { text: "This is task 2" },
      { text: "This is task 3" }
    ]
  });
  */


  Template.infobox.events({
    'click button': function () {
          var keys = Object.keys(Template.infobox);
          alert( JSON.stringify(keys) );
    }
  });

  Template.pokert.events({
    'click button': function () {
        alert( "You poked ");// + Template.pokert.get('getuname') );
    }
  });
  Template.pokert.helpers({
    userpp: function () {
      return "person 1";
    }
  });



    //users: [
    //  { uid: 121, uname: "sebastian" },
    //  { uid: 122, uname: "joe" },
    //  { uid: 124, uname: "julia" }
    //]

        //return MessagesTable.find({});



if (Meteor.isClient) {
  //Initialisation
  // counter starts at 0
  Session.setDefault('counter', 0);
...
}



UPSERT ATTEMPTS
===============

/*
upsert({
    u_id: Meteor.userId(), //original "_id"
    uname: Meteor.user().username,
    neighbs:{}
});
*/

        
//todo: 
How to "Attaching events to templates"
read https://www.meteor.com/try/4

return MessagesTable.find({}, {sort: {createdAt: -1},limit: 5}); //Recent on top


Message attributes:
      //Who owns it, who has visibnility, who can ref to as tracker (everyone)

    MessagesTable.insert({
      touid: receiver_uid,
      fromuid: sender_uid,
      text: text,
      createdAt: new Date(), // current time

      //The "you" user
      //owner: Meteor.userId(),           // _id of logged in user
      //username: Meteor.user().username  // username of logged in user

    });



    orig_id = Meteor.userId(); //original "_id"
    //orig_uname: Meteor.user().username;
    //UsersDB.insert({orig_id:orig_id, uname:orig_uname});
    //username: Meteor.user().username
    // username of logged in user



todo:
/*
  //Message operations
  Template.amessage.events({
    'click button': function () {
        alert("forward message (broadcast to neighbours)");
    }
  });
  //todo: chekcbox: only received messages. Only original messages. (ref: original from whom to whom: messages PK)
*/

A meesage has:
The message "ref" points to an original from whom to whom: The ref is the _id (PK) of messages.



Main theme:
A "product" will be "shared". It appears in other people's. The source (or maybe the initiator) is in the data.

intention only after decision.


A product is a poke, a message, potentially a voice message, [like,] or emoticon. [Like is not independent.]



What is Tabular?

Tabular
https://github.com/aldeed/meteor-tabular/issues/9

Meteor.isClient && Template.registerHelper("TabularTables", TabularTables);


js console:
q= new Mongo.Collection("users");
Error: There is already a collection named 'users'

give points

decide together (live) [dilmaj style]

use:
Session.get and set


in event:

var playerId = this._id;

this._id   ----> Session.set ----> ...


found it out!
Meteor.users
It is the next step.

Q:
Is working directly with table of users (on FE) secure?


http://meteortips.com/first-meteor-tutorial/forms/

event.type

event.preventDefault();
prevent refresh


taking control of links:
'click a': function(event){
    event.preventDefault();
}

simple!
a controller and a reader.

pre-value
event.target.playerName
fetch:
event.target.playerName.value;

submit isbette than click

 attach a unique class attribute to it 


 var selectedPlayer = Session.get('selectedPlayer');


    var selectedPlayer = Session.get('selectedPlayer');
    PlayersList.remove(selectedPlayer);

I read this
http://meteortips.com/first-meteor-tutorial/forms/










removed  code

function sync_logged_user(){
    //Error: Meteor.userId can only be invoked in method calls. Use this.userId in publish functions.
    if (Meteor.isClient){
        //alert(Meteor.user().username);
    }

    orig_id = Meteor.userId(); //original "_id"
    orig_uname: Meteor.user().username;
    //z=UsersDB.find({orig_id:orig_id});
    //Stores public info only:
    //manually
    //db.neighbour_users.insert({orig_id:'pkfsZatWwSdYpuebc', uname:'sosi', neighbours:{}});
    //cannot be done on the client side
    //if (Meteor.isServer){
    //UsersDB.insert({orig_id:orig_id, uname:orig_uname});
    //}
    if (Meteor.isClient){
        //UsersDB.insert({orig_id:orig_id, uname:orig_uname});
    }
    //if (Meteor.isClient){
    ////alert(); //(JSON.stringify(z));
    //}

    /* upsert causes a silent error:
    //http://stackoverflow.com/questions/19555473/how-to-use-meteor-upsert
    UsersDB.upsert(
    {
      // Selector
        u_id: Meteor.userId(), //original "_id"
        //uname: Meteor.user().username,
    },
    {
      // Modifier
      $set: {
        u_id: Meteor.userId(), //original "_id"
        uname: Meteor.user().username,

          neighbs:{},
          lastsynctime: Date.now()
      }
    }

    );
    */

    if (Meteor.isClient) {
        alert(Meteor.user().username +' done');
    }

}

//    sync_logged_user();


===============================



UsersDB
will be renamed to:
Neighbourship
[which is actually a graph]



          ka = keys(yourN.neighbours); //a list of strings



http://docs.mongodb.org/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/


many-to-many in mongo

          var you = Meteor.userId();
          var yourN= Neighbourship.find({'orig_id':you}).fetch();
          var a=[]
          for(k in yourN.neighbours)
              var friendship = yourN.neighbours[k]
              var them = Meteor.users.find({'_id':k});
              a.append(them);
         return a;
INSTEAD:
         return Meteor.users.find({username: {$in: yourN.neighbours}})



mongo:
save
versus
insert

many to many:
http://seanhess.github.io/2012/02/01/mongodb_relational.html

          var you = Meteor.userId();
          var yourN= Neighbourship.find({'orig_id':you}).fetch();
          alert(JSON.stringify( [yourN[0],yourN[0]['neighbours']] ))
          //return Meteor.users.find({username: {$in: yourN.neighbours}})
          return Meteor.users.find({username: {$in: yourN.neighbours}})

note: [0]


          var yourN= Neighbourship.find({'orig_id':you}).fetch();
          alert(JSON.stringify( [yourN[0],yourN[0]['neighbours']] ))
          return Meteor.users.find({username: {$in: yourN[0].neighbours}})



          var you = Meteor.userId();
          var yourN= Neighbourship.find({'orig_id':you}).fetch()[0];
          alert(JSON.stringify( [yourN,yourN['neighbours']] ))
          return Meteor.users.find({username: {$in: yourN.neighbours}})






http://blog.mongodb.org/post/87200945828/6-rules-of-thumb-for-mongodb-schema-design-part-1


{name:"Joe"
,roles:["Admin","User","Engineer"]
}

To get all the Engineers, use:

db.things.find( { roles : "Engineer" } );



how to define an index

http://blog.markstarkman.com/blog/2011/09/15/mongodb-many-to-many-relationship-data-modeling/


http://blog.markstarkman.com/blog/2011/09/15/mongodb-many-to-many-relationship-data-modeling/


http://docs.mongodb.org/manual/reference/method/db.collection.insert/


http://meteortips.com/first-meteor-tutorial/structure/



Meteor.publish('courses',function

http://stackoverflow.com/questions/19185439/how-to-publish-the-one-side-of-a-one-to-many-relationship-in-meteor-after-the


f=Neighbourship.find({'who':Meteor.userId()},{'friend':true}).fetch()

_.pluck(a,'friend')

http://iamnotachoice.com/using-mongodb-requires-thinking-mongodb-live-queries-also-help/


added bootstrap



'click .poke1':
      instead of
'click button .poke1':







        <nav>
          <ul class="pagination">
    <li>
      <a href="#" aria-label="Previous">
        <span aria-hidden="true">&laquo;</span>
      </a>
    </li>
    <li><a href="#">1</a></li>
    <li><a href="#">2</a></li>
    <li><a href="#">3</a></li>
    <li><a href="#">4</a></li>
    <li><a href="#">5</a></li>
    <li>
      <a href="#" aria-label="Next">
        <span aria-hidden="true">&raquo;</span>
      </a>
    </li>
  </ul>
  </nav>
